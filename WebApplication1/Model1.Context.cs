//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class northwindEntities : DbContext
    {
        public northwindEntities()
            : base("name=northwindEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CustomerDemographic> CustomerDemographics { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<emp> emps { get; set; }
        public virtual DbSet<empForCorelated> empForCorelateds { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Order_Detail> Order_Details { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Shipper> Shippers { get; set; }
        public virtual DbSet<sortDemo> sortDemoes { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<Territory> Territories { get; set; }
        public virtual DbSet<Alphabetical_list_of_product> Alphabetical_list_of_products { get; set; }
        public virtual DbSet<Category_Sales_for_1997> Category_Sales_for_1997 { get; set; }
        public virtual DbSet<Current_Product_List> Current_Product_Lists { get; set; }
        public virtual DbSet<Customer_and_Suppliers_by_City> Customer_and_Suppliers_by_Cities { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<Order_Details_Extended> Order_Details_Extendeds { get; set; }
        public virtual DbSet<Order_Subtotal> Order_Subtotals { get; set; }
        public virtual DbSet<Orders_Qry> Orders_Qries { get; set; }
        public virtual DbSet<Product_Sales_for_1997> Product_Sales_for_1997 { get; set; }
        public virtual DbSet<Products_Above_Average_Price> Products_Above_Average_Prices { get; set; }
        public virtual DbSet<Products_by_Category> Products_by_Categories { get; set; }
        public virtual DbSet<Sales_by_Category> Sales_by_Categories { get; set; }
        public virtual DbSet<Sales_Totals_by_Amount> Sales_Totals_by_Amounts { get; set; }
        public virtual DbSet<Summary_of_Sales_by_Quarter> Summary_of_Sales_by_Quarters { get; set; }
        public virtual DbSet<Summary_of_Sales_by_Year> Summary_of_Sales_by_Years { get; set; }
        public virtual DbSet<v_showDataForOrdersHavingMoreThanThreeProducts> v_showDataForOrdersHavingMoreThanThreeProducts { get; set; }
        public virtual DbSet<vw_customerOrdersDetails> vw_customerOrdersDetails { get; set; }
    
        [DbFunction("northwindEntities", "fn_GetValues")]
        public virtual IQueryable<fn_GetValues_Result> fn_GetValues(Nullable<int> p_orderid)
        {
            var p_orderidParameter = p_orderid.HasValue ?
                new ObjectParameter("p_orderid", p_orderid) :
                new ObjectParameter("p_orderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetValues_Result>("[northwindEntities].[fn_GetValues](@p_orderid)", p_orderidParameter);
        }
    
        [DbFunction("northwindEntities", "fn_GetValuesFromOrderDetails")]
        public virtual IQueryable<fn_GetValuesFromOrderDetails_Result> fn_GetValuesFromOrderDetails(Nullable<int> p_orderid)
        {
            var p_orderidParameter = p_orderid.HasValue ?
                new ObjectParameter("p_orderid", p_orderid) :
                new ObjectParameter("p_orderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetValuesFromOrderDetails_Result>("[northwindEntities].[fn_GetValuesFromOrderDetails](@p_orderid)", p_orderidParameter);
        }
    
        [DbFunction("northwindEntities", "fn_ShowOrderDetails")]
        public virtual IQueryable<fn_ShowOrderDetails_Result> fn_ShowOrderDetails(Nullable<int> p_orderid)
        {
            var p_orderidParameter = p_orderid.HasValue ?
                new ObjectParameter("p_orderid", p_orderid) :
                new ObjectParameter("p_orderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ShowOrderDetails_Result>("[northwindEntities].[fn_ShowOrderDetails](@p_orderid)", p_orderidParameter);
        }
    
        [DbFunction("northwindEntities", "fn_ShowSpecificOrder")]
        public virtual IQueryable<fn_ShowSpecificOrder_Result> fn_ShowSpecificOrder(Nullable<int> p_orderid)
        {
            var p_orderidParameter = p_orderid.HasValue ?
                new ObjectParameter("p_orderid", p_orderid) :
                new ObjectParameter("p_orderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ShowSpecificOrder_Result>("[northwindEntities].[fn_ShowSpecificOrder](@p_orderid)", p_orderidParameter);
        }
    
        public virtual ObjectResult<CustOrderHist_Result> CustOrderHist(string customerID)
        {
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustOrderHist_Result>("CustOrderHist", customerIDParameter);
        }
    
        public virtual ObjectResult<CustOrdersDetail_Result> CustOrdersDetail(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustOrdersDetail_Result>("CustOrdersDetail", orderIDParameter);
        }
    
        public virtual ObjectResult<CustOrdersOrders_Result> CustOrdersOrders(string customerID)
        {
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustOrdersOrders_Result>("CustOrdersOrders", customerIDParameter);
        }
    
        public virtual ObjectResult<Employee_Sales_by_Country_Result> Employee_Sales_by_Country(Nullable<System.DateTime> beginning_Date, Nullable<System.DateTime> ending_Date)
        {
            var beginning_DateParameter = beginning_Date.HasValue ?
                new ObjectParameter("Beginning_Date", beginning_Date) :
                new ObjectParameter("Beginning_Date", typeof(System.DateTime));
    
            var ending_DateParameter = ending_Date.HasValue ?
                new ObjectParameter("Ending_Date", ending_Date) :
                new ObjectParameter("Ending_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee_Sales_by_Country_Result>("Employee_Sales_by_Country", beginning_DateParameter, ending_DateParameter);
        }
    
        public virtual int InsertProduct(string productName, Nullable<int> supplierID, Nullable<int> categoryID, string quantityPerUnit, Nullable<decimal> unitPrice, Nullable<int> unitsInStock)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var quantityPerUnitParameter = quantityPerUnit != null ?
                new ObjectParameter("QuantityPerUnit", quantityPerUnit) :
                new ObjectParameter("QuantityPerUnit", typeof(string));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var unitsInStockParameter = unitsInStock.HasValue ?
                new ObjectParameter("UnitsInStock", unitsInStock) :
                new ObjectParameter("UnitsInStock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProduct", productNameParameter, supplierIDParameter, categoryIDParameter, quantityPerUnitParameter, unitPriceParameter, unitsInStockParameter);
        }
    
        public virtual ObjectResult<OrdersHavingItemsMoreThanThree_Result> OrdersHavingItemsMoreThanThree(Nullable<System.DateTime> p_fromdate, Nullable<System.DateTime> p_todate)
        {
            var p_fromdateParameter = p_fromdate.HasValue ?
                new ObjectParameter("p_fromdate", p_fromdate) :
                new ObjectParameter("p_fromdate", typeof(System.DateTime));
    
            var p_todateParameter = p_todate.HasValue ?
                new ObjectParameter("p_todate", p_todate) :
                new ObjectParameter("p_todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrdersHavingItemsMoreThanThree_Result>("OrdersHavingItemsMoreThanThree", p_fromdateParameter, p_todateParameter);
        }
    
        public virtual ObjectResult<Sales_by_Year_Result> Sales_by_Year(Nullable<System.DateTime> beginning_Date, Nullable<System.DateTime> ending_Date)
        {
            var beginning_DateParameter = beginning_Date.HasValue ?
                new ObjectParameter("Beginning_Date", beginning_Date) :
                new ObjectParameter("Beginning_Date", typeof(System.DateTime));
    
            var ending_DateParameter = ending_Date.HasValue ?
                new ObjectParameter("Ending_Date", ending_Date) :
                new ObjectParameter("Ending_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sales_by_Year_Result>("Sales_by_Year", beginning_DateParameter, ending_DateParameter);
        }
    
        public virtual ObjectResult<SalesByCategory_Result> SalesByCategory(string categoryName, string ordYear)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var ordYearParameter = ordYear != null ?
                new ObjectParameter("OrdYear", ordYear) :
                new ObjectParameter("OrdYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesByCategory_Result>("SalesByCategory", categoryNameParameter, ordYearParameter);
        }
    
        public virtual int sp_GetCustomerID(string p_CustName, ObjectParameter p_Custid)
        {
            var p_CustNameParameter = p_CustName != null ?
                new ObjectParameter("p_CustName", p_CustName) :
                new ObjectParameter("p_CustName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetCustomerID", p_CustNameParameter, p_Custid);
        }
    
        public virtual int sp_InsertData(Nullable<int> p_rollno, string p_name)
        {
            var p_rollnoParameter = p_rollno.HasValue ?
                new ObjectParameter("p_rollno", p_rollno) :
                new ObjectParameter("p_rollno", typeof(int));
    
            var p_nameParameter = p_name != null ?
                new ObjectParameter("p_name", p_name) :
                new ObjectParameter("p_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertData", p_rollnoParameter, p_nameParameter);
        }
    
        public virtual ObjectResult<Ten_Most_Expensive_Products_Result> Ten_Most_Expensive_Products()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ten_Most_Expensive_Products_Result>("Ten_Most_Expensive_Products");
        }
    
        public virtual int UpdateProduct(Nullable<int> prodid, string productname, Nullable<decimal> unitprice)
        {
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("prodid", prodid) :
                new ObjectParameter("prodid", typeof(int));
    
            var productnameParameter = productname != null ?
                new ObjectParameter("productname", productname) :
                new ObjectParameter("productname", typeof(string));
    
            var unitpriceParameter = unitprice.HasValue ?
                new ObjectParameter("unitprice", unitprice) :
                new ObjectParameter("unitprice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProduct", prodidParameter, productnameParameter, unitpriceParameter);
        }
    }
}
